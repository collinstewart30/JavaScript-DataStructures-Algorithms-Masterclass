Section 2 - Big O Notations Notes

Lesson 4
    - What is Big O Notation? Big O gives you a way to measure which algorithm is the "best" when there are multiple ways to complete a task.
    - How do we know what the best algorithm is? Big O measures that.
    - Big O is a system to for letting us know the best way to do a task such as taking a string and reversing it. There are many ways to do that but which is the "best" way?
    - Why it matters? Imagine huge amounts of data you need to sort through and it could save you a few hours of runtime if you implement the best algorithm rather than just finding the one that runs. SPEED MATTERS.
    - There are trade-offs, sometimes there isn't a clear cut best approach so you need to have a pros cons of which algorithm works the best.
    - Big O lets you recognize different pain points in your code, if something is running slow it helps you figure out why it might be doing that and what a better solution would be
    - Less important but it also comes up in interviews to see if you understand it

Lesson 5
    -Example code in Lesson 5 folder
        -writing a function that adds up all the numbers from 1 to n (n is input into the function)
            -big-o-test.js
                -Two function in that file but which is better?
                -Uses a timer to see which is faster
    -Shorter functions does not always mean that it is better - a longer function can sometimes be a faster way to do something, it depends on the situation
    - What does "better" mean when it comes to code?
        -Faster? Less memory? Easier to read? Code length?
        -A lot of the time, faster is usually the best - more effecient the better!
    - Why not use a timer to see which function is faster?
        -Sometimes using a timer is inaccurate because the time can change. Run the file in the folder (big-o-test.js) and you will see that each time you run it you get a different amount of time
        - Different machines can record different times - faster machines vs slow old machines doesnt make the solution better just the machines
        - For very fast algorithms speed won't be precise enough and will have to read too far into small intervals of time
    -Timing code isn't necessarily bad, just not always 100% accurate 
    - You don't always want to have to write a timing function for every piece of code you write 
